


예시)
HTTP 요청 메세지                            HTTP 응답 메세지                            HTTP 메세지 구조
------------------------------------------------------------------------------------------------------------------
GET /search?q=hello&hl=ko HTTP/1.1          HTTP/1.1 200 OK                             start-line 시작라인
------------------------------------------------------------------------------------------------------------------
Host: www.google.com                        Content-Type: text/html;charset=UTF-8       header 헤더
                                            Content-Length: 3423
------------------------------------------------------------------------------------------------------------------
                                                                                        empty line 공백라인 (CRLF)
------------------------------------------------------------------------------------------------------------------
* 요청 메세지도 body 본문을 가질 수 있음    <html>                                      message body
                                            <body>...</body>
                                            </html>
------------------------------------------------------------------------------------------------------------------

HTTP 요청 메세지)
* SP(공백), CRLF(엔터)
start-line(request-line)
    -> method (SP) request-target (SP) http-version (CRLF)
method: HTTP 메소드(GET) -> 조회
    종류: GET(조회), POST(요청 내역 처리), PUT, DELETE
요청대상: /search?q=hello&hl=ko
    절대경로 = "/"로 시작하는 경로
HTTP Version: HTTP/1.1


HTTP 응답 메세지)
start-line(status-line)
    -> http-version (SP) status-line (SP) reason-phrase (CRLF)
HTTP Version: HTTP/1.1
HTTP 상태코드: 요청 성공/실패를 나타냄
    200: 성공,
    400: 클라이언트 요청 오류,
    500: 서버 내부 오류,
이유문구: 사람이 이해할 수 있는 짧은 상태 설명글 -> OK

header-field
    -> field-name ":" OWS field-value OWS (OWS:띄어쓰기 허용)
    * field-name: 대소문자 구문 없음
    Host: www.google.com    Content-Type: text/html;charset=UTF-8
                            Content-Length: 3423
HTTP 전송에 필요한 모든 부가정보
예) 메세지 바디의 내용, 메세지 바디의 크기, 압축, 인증, 요청 클라이언트(브라우저) 정보,
    서버 어플리케이션 정보, 캐쉬 관리 정보
표준 헤더가 너무 많다
필요시, 임의의 헤더 추가 기능 -> 예) helloworld: hi 

message body
    -> <html><body></body></html>
실제 전송할 데이터
HTML 문서, 이미지, 영상, JSON 등등 -> byte로 표현할 수 있는 모든 데이터 전송 가능

단순함 확장 가능)
HTTP는 단순하다 -> 스펙 읽어봐도 됨..
HTTP 메세지도 매우 단순
크게 성공하는 표준 기술은 단순하지만 확장 가능한 기술