-- 인터넷 통신 및 인터넷 프로토콜 --
IP(인터넷 프로토콜)
: 지정한 IP 주소에 패킷이라는 통신 단위로 데이터를 전달

예시)
출발: 100.100.100.1
목적: 200.200.200.1

경로)
클라이언트 -> 노드 -> 패킷 -> 서버
서버 -> 노드 -> 패킷 -> 클라이언트

한계)
비연결성: 대상 서버가 패킷을 받을 수 있는 상태인 지 모르는 경우
비신뢰성: 패킷소실, 패킷 전달 순서 문제("Hello" "World" -> "World" "Hello")
프로그램 구분: 같은 IP를 사용하는 서버에서 통신하는 어플리케이션이 둘 이상인 경우


-- TCP/UDP --
[인터넷 프로토콜 스택의 4계층]
애플리케이션 계층 - HTTP, FTP
전송 계층 - TCP, UDP
인터넷 계층 - IP
네트워크 인터페이스 계층

구체화)
어플리케이션          - 웹 브라우저, 네트워크 게임, 채팅 프로그램
                        소켓 라이브러리
OS(운영체제)          - TCP, UDP
                        IP(인터넷 프로토콜)
네트워크 인터페이스   - LAN 드라이버, LAN 장비

경로)
프로그램이 "Hello World" 메세지 생성 -> 소켓 라이브러리를 통해 OS에 전달 -> TCP 정보 생성 및 "Hello World" 메세지 데이터 포함 
-> IP 패킷 생성, TCP 정보 데이터 포함 -> LAN 카드 -> 인터넷 -> 서버

TCP/IP 패킷 정보)
IP: 출발지 IP, 목적지 IP, ... (전송데이터 포함)
TCP: 출발지 PORT, 목적지 PORT, 전송제어, 순서, 검증정보, ... (전송데이터 포함)

TCP
: 전송 제어 프로토콜

특징)
연결지향(TCP 3 way handshake, 가상연결) -> SYN(접속 요청), ACK(요청 수락)
 1.SYN,
 2.SYN + ACK,
 3.ACK (3.ACK와 함께 데이터 전송도 가능)
데이터 전달 보증: 데이터 전송 -> 데이터 전송 잘받음(답변)
순서보장: 패킷1, 패킷2, 패킷3 -> 패킷1, 패킷3(X), 패킷2 -> 패킷2부터 다시 보내라고 요청
신뢰할 수 있는 프로토콜
* 현재 대부분 TCP 사용

UDP
:사용자 데이터 프로토콜

특징)
하얀 도화지(기능이 거의 없음)
연결지향(TCP 3 way handshake, 가상연결) -> X
데이터 전달 보증 -> X
순서보장 -> X
데이터 전달 및 순서가 보장되지 않지만, 단순하고 빠름

정리) 
IP와 거의 같고, 
PORT 및 체크섬(네트워크를 통해서 전송된 데이터의 값이 변경되었는지(무결성)를 검사하는 값) 정도만 추가
어플리케이션에서 추가 작업이 필요


-- PORT --
PORT
: 같은 IP 내부에서 프로세스 구분

TCP/IP패킷)
출발지IP, PORT,
목적지IP, PORT,
전송데이터

PORT 구분)
0 ~ 65535: 할당 가능
0 ~ 1023: 잘 알려진 포트, 사용하지 않는 것 이 좋음
FTP:    20, 21
TELNET: 23
HTTP:   80
HTTPS:  443


-- DNS --
DNS
: 도메인 네임 시스템
  전화번호부, 도메인 명을 IP주소로 변환

사용이유)
IP는 기억하기 어렵다
IP는 변경될 수 있다(과거IP -> 신규IP)

DNS사용)
DNS 서버
도메인명   | IP
google.com | 210.210.210.3

인터넷 네트워크 정리)
인터넷통신
IP
TCP/UDP
PORT
DNS


-- URI와 웹브라우저 요청흐름 --
URI
: Uniform Resource Identifier,
  URL과 URN 포함관계,
  URI는 로케이터(locator), 이름(name) 또는 둘다 추가로 분류할 수 있다

단어 뜻)
Uniform:    리소스 식별하는 통일된 방식
Resource:   자원, URI로 식별할 수 있는 모든 것(제한 없음)
Identifier: 다른 항목과 구분하는데 필요한 정보
URL:        Uniform Resource Locator(리소스가 있는 위치를 지정)
URN:        Uniform Resource Name(리소스에 이름을 부여)

URL/URN)
위치는 변할 수 있지만, 이름은 변하지 않는다
urn:isbn:8960777331 (어떤 책의 isbn URN)
URN 이름만으로 실제 리소스를 찾을 수 있는 방법이 보편화 되지않음
* URI를 URL과 같은 의미로 사용


URL 전체문법)
scheme://[userinfo@]host[:port][/path][?query][#fragment]
https://www.google.com/search?q=hello&hl=ko
프로토콜   : https
호스트명   : www.google.com
포트번호   : 443
패스       : /search
쿼리 스트링: ?q=hello&hl=ko

scheme)
-> https
주로 프로토콜을 사용
프로토콜: 어떤 방식으로 자원에 접근할 것인가 하는 약속 규칙
 예) http(port: 80), https(port: 443), ftp, ...
포트는 생략이 가능하다
https는 http에 보안이 추가된 것(Http Secure)

userinfo)
-> X
URL에 사용자정보를 포함해서 인증
* 거의 사용하지 않는다

host)
-> www.google.com
호스트명
IP주소 또는 도메인명을 직접 사용 가능하다

port)
-> 443
포트(접속포트)
일반적으로 생략, http(80), https(443)

path)
-> /search, 
   /home/file1.jsp, /members, /members/100, /items/iphone12
리소스 경로, 계층적 구조

query)
-> ?q=hello&hl=ko
key = value 형태
?로 시작, &로 추가 가능, ?keyA=valueA&keyB=valueB
query parameter, query string 등으로 불림
웹 서버에 제공하는 파라미터, 문자형태로 전송 (숫자->문자)

fragment)
https://docs.spring.io/spring-boot/docs/current/reference/html/getting-started.html#getting-started.introducing-spring-boot
-> #getting-started.introducing-spring-boot
html 내부 북마크 등에 사용
서버에 전송하는 정보는 아님


웹브라우저 요청흐름
요청흐름)
https://www.google.com/search?q=hello&hl=ko 검색 -> DNS 조회(www.google.com) -> https(443) 포트생략
 -> http 요청 메세지 전달(GET /search?q=hello&hl=ko HTTP/1.1 Host: www.google.com)

HTTP 메세지 전송)
웹 브라우저가 HTTP 메세지 생성 -> 소켓 라이브러리를 통해 전달(TCP/IP 연결, HTTP 메세지 포함)
-> TCP/IP 패킷 생성, HTTP 메세지 포함 -> LAN 카드 -> 인터넷 -> 서버

패킷생성)
출발지IP, PORT,
목적지IP, PORT,
http 요청 메세지(
    GET /search?q=hello&hl=ko 
    HTTP/1.1 
        Host: www.google.com
)

전처리)
http 응답 메세지(
    HTTP/1.1 200 OK
    Content-Type: text/html;charset=UTF-8
    Content-Length: 3423
    <html>
    <body>...</body>
    </html>
),
웹 브라우저 HTML 렌더링











