API URI 설계)
: 리소스 식별, URI 계층 구조 활용

1) 회원 목록 조회
: /members
2) 회원 조회
: /members/{id}
3) 회원 등록
: /members/{id}
4) 회원 수정
: /members/{id}
5) 회원 삭제
: /members/{id}

좋은 URI 설계
: URI는 리소스만 식별
  리소스와 해당 리소스를 대상으로 하는 행위를 분리

HTTP 메소드 종류)
1) GET: 리소스 조회
2) POST: 요청 데이터 처리, 주로 등록에 사용
3) PUT: 리소스를 대체, 해당 리소스가 없으면 생성
4) PATCH: 리소스 부분 변경
5) DELETE: 리소스 삭제
--------------------------------------------------------------------------------
6) HEAD: GET과 동일하지만 메세지 부분을 제외하고, 상태 줄과 헤더만 반환
7) OPTIONS: 대상 리소스에 대한 통신 가능 옵션(메소드)을 설명(주로 CORS에서 사용)
8) CONNECT: 대상 자원으로 식별되는 서버에 대한 터널을 설정
9) TRACE: 대상 리소스에 대한 경로를 따라 메세지 루프백 테스트를 수행



GET)
----------------------------------
GET/search?q=hello&hi=ko HTTP/1.1
Host: www.google.com
----------------------------------
: 리소스 조회
  서버에 전달하고 싶은 데이터는 쿼리스트링(파라미터)를 통해서 전달
  메시지 바디를 사용해서 데이터를 전달할 수 있지만, 지원하지 않는 곳이 많아서 권장하지 않는다


POST)
----------------------------------
POST/members HTTP/1.1
Content-Type: application/json
{
  "userName" : "jw"
  "age : 31
}
----------------------------------
: 요청 데이터처리
  메세지 바디를 통해 서버로 요청데이터를 전달
  서버는 요청데이터를 처리
  메세지 바디를 통해 들어온 데이터를 처리하는 모든 기능을 수행한다
  주로 전달된 데이터로 신규 리소스 등록, 프로세스 처리에 사용








