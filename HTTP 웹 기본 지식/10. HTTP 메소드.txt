API URI 설계)
: 리소스 식별, URI 계층 구조 활용

1) 회원 목록 조회
: /members
2) 회원 조회
: /members/{id}
3) 회원 등록
: /members/{id}
4) 회원 수정
: /members/{id}
5) 회원 삭제
: /members/{id}

좋은 URI 설계
: URI는 리소스만 식별
  리소스와 해당 리소스를 대상으로 하는 행위를 분리

HTTP 메소드 종류)
1) GET: 리소스 조회
2) POST: 요청 데이터 처리, 주로 등록에 사용
3) PUT: 리소스를 대체, 해당 리소스가 없으면 생성
4) PATCH: 리소스 부분 변경
5) DELETE: 리소스 삭제
--------------------------------------------------------------------------------
6) HEAD: GET과 동일하지만 메세지 부분을 제외하고, 상태 줄과 헤더만 반환
7) OPTIONS: 대상 리소스에 대한 통신 가능 옵션(메소드)을 설명(주로 CORS에서 사용)
8) CONNECT: 대상 자원으로 식별되는 서버에 대한 터널을 설정
9) TRACE: 대상 리소스에 대한 경로를 따라 메세지 루프백 테스트를 수행



GET)
----------------------------------
GET/search?q=hello&hi=ko HTTP/1.1
Host: www.google.com
----------------------------------
: 리소스 조회
  서버에 전달하고 싶은 데이터는 쿼리스트링(파라미터)를 통해서 전달
  메시지 바디를 사용해서 데이터를 전달할 수 있지만, 지원하지 않는 곳이 많아서 권장하지 않는다


POST)
----------------------------------
POST/members HTTP/1.1
Content-Type: application/json
{
  "userName" : "jw"
  "age : 31
}
----------------------------------
: 요청 데이터처리
  메세지 바디를 통해 서버로 요청데이터를 전달
  서버는 요청데이터를 처리
  메세지 바디를 통해 들어온 데이터를 처리하는 모든 기능을 수행한다
  주로 전달된 데이터로 신규 리소스 등록, 프로세스 처리에 사용

POST 정리)
1) 새 리소스 생성(등록)
: 서버가 아직 식별하지 않은 새 리소스 생성
2) 요청 데이터 처리
: 단순히 데이터를 생성하거나, 변경하는 것을 넘어서 프로세스를 처리해야하는 경우
  예) 주문에서 결제완료 -> 배달시작 -> 배달완료처럼 단순히 값 변경을 넘어, 프로세스의 상태가 변경되는 경우
  POST의 결과로 새로운 리소스가 생성되지 않을 수도 있음
  예) POST/orders/{orderId}/start-delivery (컨트롤 URI)
3) 다른 메소드로 처리하기 애매한 경우
: 예) JSON으로 조회 데이터를 넘겨야 하는데, GET 메소드를 사용하기 어려운 경우 -> 애매하면 POST를 사용
  







