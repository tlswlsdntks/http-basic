클라이언트에서 서버로 데이터 전송 방식)
1) 쿼리 스트링(파라미터)를 통한 데이터 전송
: GET
  주로 정렬 필터(검색어)
2) 메세지 바디를 통한 데이터 전송
: POST, PUT, PATCH
  회원가입, 상품주문, 리소스 등록/변경

클라이언트에서 서버로 데이터 전송 상황)
1) 정적 데이터 조회
: 이미지, 정적 텍스트 문서
  조회는 GET 사용
  정적데이터는 일반적으로 쿼리 파라미터 없이 리소스 경로로 단순하게 조회가능

2) 동적 데이터 조회
: 주로 검색, 게시판 목록에서 정렬 필터(검색어)
  조회 조건을 줄여주는 필터, 조회 결과를 정렬하는 정렬 조건에 주로 사용
  조회는 GET 사용
  GET은 쿼리 스트링(파라미터)을 사용해서 전달

3) HTML FORM 태그를 이용한 데이터 전송
: 회원가입, 상품주문, 데이터 변경
  1. HTML FORM SUBMIT -> POST 전송
  : 예) 회원가입, 상품주문, 데이터 변경
  2. Content-Type: application/x-www-form-urlencoded 사용
  : FORM의 내용을 메세지 바디를 통해서 전송(key=value, 쿼리 스트링(파라미터) 형식)
    전송 데이터를 urlencoding 처리
    예) abc김 -> abc%EA%B9%80
  3. HTML FORM은 GET 전송도 가능
  4. Content-Type: multipart/form-data
  : 파일 업로드 같은 바이너리 데이터 전송 시, 사용
    다른 종류의 여러 파일과 폼의 내용을 함께 전송 가능(그래서 이름이 multipart)
  !참고: HTML FORM 태그 전송은 GET, POST만 지원
  

4) HTTP API를 통한 데이터 전송
: 회원가입, 상품주문, 데이터 변경
  서버-서버, 앱 클라이언트, 웹 클라이언트(Ajax)
  1. 서버-서버
  : 백엔드 시스템 통신
  2. 앱 클라이언트
  : 아이폰, 안드로이드
  3. 웹 클라이언트
  : HTML에서 FORM 태그 전송 대신 자바스크립트를 이용한 통신에 사용(Ajax)
    예) React, VueJs 같은 웹 클라이언트와 API 통신
  4. POST, PUT, PATCH: 메세지바디를 통해 데이터 전송
  5. GET: 조회, 쿼리 스트링(파라미터)로 데이터 전달
  6. Content-Type: application/json을 주로 사용(사실상 표준)
     TEXT, XML, JSON 등


POST - 신규 자원 등록 특징)
1) 클라이언트는 등록될 리소스의 URI를 모른다
: 회원등록/members -> POST
  POST/members
2) 서버가 새로 등록된 리소스 URI를 생성해준다
: HTTP/1.1 201 Created
  Location:/members/100
3) 컬렉션(Collection)
: 서버가 관리하는 리소스 디렉토리
  서버가 리소스의 URI를 생성하고 관리
  여기서 컬렉션은 /members


PUT - 신규 자원 등록 특징)
1) 클라이언트가 리소스 URI를 알고있어야한다
: 파일등록/files/{fileName} -> PUT
  PUT/files/star.jpg
2) 클라이언트가 직접 리소스의 URI를 지정한다
3) 스토어(Store)
: 클라이언트가 관리하는 리소스의 저장소
  클라이언트가 리소스의 URI를 알고 관리
  여기서 스토어는 /fils

HTML FORM 태그 전송 - 신규 자원 등록 특징)
1) HTML FORM은 GET, POST만 지원
2) 컨트롤 URI
: GET, POST만 지원하므로 제약이 있음
  이런 제약을 해결하기 위해 동사로 된 리소스 경로 사용
  POST의 /new, /edit, /delete가 컨트롤 URI
  HTTP 메소드로 해결하기 애매한 경우 사용

정리)
HTTP API - 컬렉션
: POST 기반 사용
  서버가 리소스 URI를 결정
HTTP API - 스토어
: PUT 기반 사용
  클라이언트가 리소스 URI를 결정
HTML FORM 사용
: 순수 HTML+HTML FORM 사용
  GET, POST만 지원







