상태코드)
: 클라이언트가 보낸 요청의 처리 상태를 응답에서 알려주는 기능

1xx(informational)
: 요청이 수신되어 처리중
2xx(Successful)
: 요청 정상처리
3xx(Redirection)
: 요청을 완료하려면 추가 행동이 필요
4xx(Client Error)
: 클라이언트 오류, 잘못된 문법 등으로 서버가 요청을 수행할 수 없음
5xx(Server Error)
: 서버 오류, 서버가 정상 요청을 처리하지 못함

2xx - 성공)
1) 200 OK
: 요청 성공
---------------------------------------------------------------------
요청                                응답
GET /members/100 HTTP/1.1     >     HTTP/1.1 200 OK
Host: localhost:8080                Content-Type: application/json
                                    Content-Length: 34
                                    {
                                      "userName" : "jw"
                                      "age" : 20
                                    }
---------------------------------------------------------------------
2) 201 Created
: 요청 성공해서 새로운 리소스가 생성됨
-------------------------------------------------------------------------------------------------------------
요청                                    응답
POST /members/100 HTTP/1.1        >     HTTP/1.1 201 Created
Content-Type: application/json          Content-Type: application/json
                                        Content-Length: 34
                                        Location: /members/100 -> 생성된 리소스는 Location 헤더필드로 식별!
                                        {
                                          "userName" : "jw"
                                          "age" : 20
                                        }
-------------------------------------------------------------------------------------------------------------
3) 202 Accepted
: 요청이 접수되었으나 처리가 완료되지 않았음
  배치처리 같은 곳에서 사용
  예) 요청 접수 후, 1시간 뒤에 배치 프로세스가 요청을 처리함
4) 204 No Content
: 서버가 요청을 성공적으로 수행했지만, 응답 페이로드 본문에 보낼 데이터가 없음
  save 버튼의 결과로 아무 내용이 없어도 된다
  save 버튼을 눌러도 같은 화면을 유지해야한다
  결과 내용이 없어도 204 메세지(2xx)만으로 성공을 인식할 수 있다

3xx - 리다이렉션)
: 요청을 완료하기위해 유저 에이전트의 추가 조치 필요
리다이렉션의 이해)
: 웹 브라우저는 3xx 응답의 결과에 Location 헤더가 있으면, Location 위치로 자동이동(리다이렉션)
자동 리다이렉트의 흐름)
-------------------------------------------------------------------------------------------------------------
요청                              응답
GET /event HTTP/1.1        >      HTTP/1.1 301 Moved Permanently
Host: localhost:8080              Location: /new-event

요청                              응답
GET /new-event HTTP/1.1        >  HTTP/1.1 200 OK
Host: localhost:8080              
-------------------------------------------------------------------------------------------------------------
리다이렉션의 종류)
1) 영구 리다이렉션
: 특정 리소스의 URI가 영구적으로 이동
  예) /members -> /users, /event -> new-event
2) 일시 리다이렉션
: 일시적인 변경
  주문완료 후 주문내역화면으로 이동
  PRG: Post/Redirect/Get
3) 특수 리다이렉션
: 결과 대신 캐시를 사용


영구 리다이렉션)
: 리소스의 URI가 영구적으로 이동
  원래의 URIF를 사용X, 검색 엔진 등에서도 변경 인지
1) 301 Moved Permanently
: 리다이렉트 시, 요청 메소드가 GET으로 변하고 본문이 제거될 수도 있음(MAY)
-------------------------------------------------------------------------------------------------------------
요청                              응답
POST /event HTTP/1.1        >     HTTP/1.1 301 Moved Permanently
Host: localhost:8080              Location: /new-event
name=hello&age=20

요청                              응답
GET /new-event HTTP/1.1        >  HTTP/1.1 200 OK
Host: localhost:8080              
-------------------------------------------------------------------------------------------------------------
2) 308 Permanent Redirect
: 301과 기능은 같음
  리다이렉트시, 요청 메소드와 본문유지(처음 POST를 보내면 리다이렉트도 POST 유지)
-------------------------------------------------------------------------------------------------------------
요청                              응답
POST /event HTTP/1.1        >     HTTP/1.1 301 Permanent Redirect
Host: localhost:8080              Location: /new-event
name=hello&age=20

요청                              응답
POST /new-event HTTP/1.1        >  HTTP/1.1 200 OK
Host: localhost:8080              
name=hello&age=20
-------------------------------------------------------------------------------------------------------------

일시적인 리다이렉션)
: 리소스의 URI가 일시적으로 변경
  따라서 검색엔진 등에서 URI를 변경하면 안됨
1) 302 Found
: 리다이렉트 시, 요청 메소드가 GET으로 변하고, 본문이 제거될 수도 있음(MAY)
2) 307 Temporary Redirect
: 302와 기능은 같음
  리다이렉트 시, 요청 메소드와 본문유지(요청 메소드를 변경하면 안된다. MUST NOT)
3) 303 See Other
: 302와 기능은 같음
  리다이렉트 시, 요청 메소드가 GET으로 변경

PRG - 일시적인 리다이렉션 예제)
문제
: POST로 주문 후에 웹 브라우저를 새로고침하면 중복주문이 될 수도 있다
방안
: POST로 주문 후에 새로고침으로 인한 중복주문방지
  새로고침해도 결과화면을 GET으로 조회
  중복주문 대신에 결과화면만 GET으로 다시 요청
-------------------------------------------------------------------------------------------------------------
요청                                  응답
POST /order HTTP/1.1            >     HTTP/1.1 302 Found
Host: localhost:8080                  Location: /order-result/19
itemId=mouse&count=1

요청                                  응답
GET /order-result/19 HTTP/1.1   >     HTTP/1.1 200 OK
Host: localhost:8080              
-------------------------------------------------------------------------------------------------------------
 
리다이렉션 현실)
: 307, 303을 권장하지만 현실적으로 이미 많은 애플리케이션 라이브러리들이 302를 기본값으로 사용
  자동 리다이렉션시에 GET으로 변해도 되면 그냥 302를 사용해도 큰 문제 없음

기타 리다이렉션)
1) 300 Multiple Choices: 사용안함
2) 304 Not Modified
: 캐시를 목적으로 사용
  클라이언트에게 리소스가 수정되지않았음을 알려준다. 따라서 클라이언트는 로컬PC에 저장된 캐시를
  재사용한다(캐시로 리다이렉트를 한다)
  304 응답은 응답에 메세지 바디를 포함하면 안된다(로컬 캐시를 사용해야하므로)
  조건부 GET, HEAD 요청 시, 사용

4xx - 클라이언트 오류)
: 클라이언트의 요청에 잘못된 문법 등으로 서버가 요청을 수행할 수 없음
  오류의 원인이 클라이언트에 있음
  중요! 클라이언트가 이미 잘못된 요청 데이터를 보내고 있기 때문에, 똑같은 재시도가 실패함
1) 400 Bad Request
: 클라이언트가 잘못된 요청을 해서 서버가 요청을 처리할 수 없음
  요청 구문, 메시지 등등 오류
  클라이언트는 요청 내용을 다시 검토하고 보내야함
  예) 요청 파라미터가 잘못되거나, API 스펙이 맞지않을 때
2) 401 Unauthorized
: 클라이언트가 해당 리소스에 대한 인증이 필요함
  인증(Authentication)되지 않음
  401 오류 발생 시, 응답에 WWW-Authenticate 헤더와 함께 인증방법을 설명
  참고) 인증(Authentication): 본인이 누구인 지 확인(로그인)
        인가(Authorization): 권한부여(admin 권한처럼 특정 리소스에 접근할 수 있는 권한, 인증이 있어야 인가가 있음)
        오류메세지가 Unauthorized이지만 인증되지 않음(이름이 아쉬움)
3) 403 Forbidden
: 서버가 요청을 이해했지만 승인을 거부함
  주로 인증 자격 증명은 있지만, 접근 권한이 불충분한 경우
  예) admin 등급이 아닌 사용자가 로그인 했지만, admin 등급의 리소스에 접근하는 경우

4) 404 Not Found
: 요청 리소스가 서버에 없음
  또는 클라이언트가 권한이 부족한 리소스에 접근하면 해당 리소스를 숨기고 싶을 때

5xx - 서버 오류)
: 서버 문제로 오류발생
  서버에 문제가 있기때문에 재시도하면 성공할 수도 있음(복구가 되거나 등)
1) 500 Internal Server Error
: 서버문제로 오류 발생, 애매하면 500 오류처리
2) 503 Service Unavailable
: 서비스 이용불가
  서버가 일시적인 과부화 또는 예정된 작업으로 잠시 요청을 처리할 수 없음
  Retry-After 헤더 필드로 얼마뒤에 복구되는 지 보낼 수 있음